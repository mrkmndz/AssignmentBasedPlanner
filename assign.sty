\ProvidesPackage{assign}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%DEPENDENCIES%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%need to make calendar
\RequirePackage{termcal}
%turn termcal's \setdate into \termcalsetdate (adapted from savesym package)
\expandafter\let\csname termcalsetdate\expandafter\endcsname\csname setdate\endcsname
%undefine setdate
\expandafter\let\csname setdate\endcsname\relax
%need for date manipulation
\RequirePackage{datenumber}
%need for making function with optional arguments work well
\RequirePackage{xparse}
%need for various programming things
\RequirePackage{etoolbox}
%need for coloring the highlighting
\RequirePackage{color}
%need for highlighting
\RequirePackage{soul}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%OPTIONS%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%if no highlight option, make the highlight command into a dummy command that just passes back the argument
\newcommand{\@high}[1]{#1}
%highlight option
\DeclareOption{highlight}{
%making the \@highcommand into a real highlighting command
\renewcommand{\@high}[1]{\hl{#1}}
}
%process the options
\ProcessOptions\relax
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%VARIABLES%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%making counters we'll need later
\newcounter{@todaysdatenum}
\newcounter{@assignmentdatenum}
\newcounter{@truemonth}
\newcounter{@trueyear}
%making token register that will hold the entire item based planner
\newtoks{\@ibp}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%FUNCTIONS%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%to make the date assumptions stable in archive, \setstablemonth command
\newcommand{\setstablemonth}[2]{
%save the month and year commands for later use
\setcounter{@truemonth}{\month}
\setcounter{@trueyear}{\year}
%make the year stable
\month=#1
\year=#2
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Bolded class title with divider line
\newcommand{\class}[1]{
\@ibp\expandafter{\the\@ibp{
\pagebreak[1]
\vskip\medskipamount 
\leaders\vrule width \textwidth\vskip0.4pt
\vskip\medskipamount
\nointerlineskip
\noindent\hspace*{15pt} \textbf{#1}\\}}
\def\@currentclass{#1}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%main command of the package, adding an assignment.  Syntax: \assign{description}{month}{day}{year} or \assign{description}{month}{day} or \assign{description}{day}
\DeclareDocumentCommand \assign { m o o o}{ 
	%within an evaluation, start with the date, as established either by truth or by \setstablemonth
	\setdatetoday
	%Set the todays datenum to the true datenum
	\setmydatenumber{@todaysdatenum}{\the@trueyear}{\the@truemonth}{\day}%
	\ifboolexpr{
		%Check if there are none of the optional values (month, day, year)
		test {\IfNoValueTF{#2}}
		and 
		test {\IfNoValueTF{#3}}
		and
		test {\IfNoValueTF{#4}}
	}
		{
			%if so, just put the description and the question mark into a command, never with highlighting
			\def\@entry{{#1}\\
			\hspace*{15pt} ?\\}
		}
		{
			\ifboolexpr{
				%Check if there is only one optional value (day)
				not test {\IfNoValueTF{#2}}
				and 
				test {\IfNoValueTF{#3}}
				and
				test {\IfNoValueTF{#4}}
			}
				%if so, set the datenumber package date to stable year, stable month, specified day
				{\setdate{\thedateyear}{\thedatemonth}{#2}}
				{
					\ifboolexpr{
						%Check if there are two optional values (month, day)
						not test {\IfNoValueTF{#2}}
						and 
						not test {\IfNoValueTF{#3}}
						and
						test {\IfNoValueTF{#4}}
					}
						%if so, set the datenumber package date to stable year, specified month, specified day
						{\setdate{\thedateyear}{#2}{#3}}
						%if not, then all three optional arguments must have been given, so set the datenumber package date to specified year, specified month, specified day
						{\setdate{#4}{#2}{#3}}
				}
			%for the instances that some optional argument, hence date, has been given, now we'll make the actual formatted entry into a command
			\def\@preentrytail{\datedayname,~\datemonthname~{\thedateday},~\thedateyear}
				%set the @assignmentdatenum to the absolute datenum of the given datenumber package date for the assignment date, not the real date, remember that was set at the top of the function
				\setmydatenumber{@assignmentdatenum}{\thedateyear}{\thedatemonth}{\thedateday}%
				%find the difference between the two absolute datenums, or the number of days between
				\addtocounter{@assignmentdatenum}{-\the@todaysdatenum}%
				%check if this gap is less than two.  this is an option not yet exposed to the caller of the package.  it should be, later
				\ifnumcomp{\the@assignmentdatenum}{<}{2}
				{
					%if so, highlight the assignment, into another command
					\def\@entry{\@high{#1}\\
					\hspace*{15pt}\@high{\hbox{\@preentrytail}}\\}
				}
				{
					%if not, don't highlight the assignment or the due date, but put it into the entry command
					\def\@entry{{#1}\\
					\hspace*{15pt}\@preentrytail\\}
				}
				%Adding entry to calendar using caltext
				\expandafter\caltext\expandafter{\expandafter\thedatemonth\expandafter/\expandafter\thedateday\expandafter/\expandafter\thedateyear\expandafter}\expandafter{\@currentclass: #1} 
		}
	%add entry to token register, expanded
	\expandafter\addtotoks\expandafter{\expandafter\@ibp\expandafter}\expandafter{\@entry}
	%just so no other function is messed up, set the datenumber package date back to the stable date
	\setdatetoday
}
%%%%%%%%%%%%%%DISPLAY%%%%%%%%%%%%%%%%%%%%%
%command to actually print the item based planner.  No arguments
\newcommand\printplanner{\the\@ibp}
%The Calendar Command Syntax: \printcalendar{startdate mm/dd/yyyy}{no. of weeks}
\newcommand\printcalendar[2]
{
	%Make datenumbersetdate off of setdate
	\expandafter\global\expandafter\let\csname datenumbersetdate\expandafter\endcsname%
	\csname setdate\endcsname
	%Make setdate off of termcalsetdate
	\expandafter\global\expandafter\let\csname setdate\expandafter\endcsname%
	\csname termcalsetdate\endcsname
	%start the calendar with the right date and weeks
	\begin{calendar}{#1}{#2}
		%all the days are important, but not numbered
		\calday[Sunday]{\noclassday}
		\calday[Monday]{\noclassday}
		\calday[Tuesday]{\noclassday}
		\calday[Wednesday]{\noclassday}
		\calday[Thursday]{\noclassday}
		\calday[Friday]{\noclassday}
		\calday[Saturday]{\noclassday}
	\end{calendar}
	%Make calsetdate off of setdate
	\expandafter\global\expandafter\let\csname calsetdate\expandafter\endcsname%
	\csname setdate\endcsname
	%Make setdate off of datenumbersetdate
	\expandafter\global\expandafter\let\csname setdate\expandafter\endcsname%
	\csname datenumbersetdate\endcsname
}