\ProvidesPackage{assign}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%DEPENDENCIES%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%need to make calendar
\RequirePackage{termcal}
%turn termcal's \setdate into \termcalsetdate (adapted from savesym package)
\expandafter\let\csname termcalsetdate\expandafter\endcsname\csname setdate\endcsname
%undefine setdate
\expandafter\let\csname setdate\endcsname\relax
%need for date manipulation
\RequirePackage{datenumber}
%need for making function with optional arguments work well
\RequirePackage{xparse}
%need for various programming things
\RequirePackage{etoolbox}
%need for coloring the highlighting
\RequirePackage{color}
%need for highlighting
\RequirePackage{soul}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%OPTIONS%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%if no highlight option, make the highlight command into a dummy command that just passes back the argument
\newcommand{\@high}[1]{#1}
%highlight option
\DeclareOption{highlight}{
	%making the \@highcommand into a real highlighting command
	\renewcommand{\@high}[1]{\hl{#1}}
}
%process the options
\ProcessOptions\relax
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%VARIABLES%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%making counters we'll need later
\newcounter{@todaysdatenum}
\newcounter{@assignmentdatenum}
\newcounter{@truemonth}
\newcounter{@trueyear}
\newcounter{@stablemonth}
\newcounter{@stableyear}
\newcounter{hlthreshold}
\setcounter{hlthreshold}{2}
%making token register that will hold the entire item based planner
\newtoks{\@ibp}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%FUNCTIONS%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%to make the date assumptions stable in archive, \setstablemonth command
	\setcounter{@truemonth}{\month}
	\setcounter{@trueyear}{\year}
	%Set the todays datenum to the true datenum
	\setmydatenumber{@todaysdatenum}{\the@trueyear}{\the@truemonth}{\day}%
	\setcounter{@stablemonth}{\month}
	\setcounter{@stableyear}{\year}
\newcommand{\setstablemonth}[2]{
	\setcounter{@stablemonth}{#1}
	\setcounter{@stableyear}{#2}
	\month=#1
	\year=#2
}
\newcommand{\@makedatestabledate}{
\setdate{\the@stableyear}{\the@stablemonth}{\day}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%line divider
\newcommand{\@linedivide}[2]{
	\vskip\csname #1skipamount\endcsname 
	\leaders\vrule width \linewidth\vskip0.4pt
	\vskip\csname #2skipamount\endcsname 
	\nointerlineskip
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Class command
\newcommand{\class}[1]{
	%add class header to token register
	\@ibp\expandafter{\the\@ibp{
	%low priority pagebreak
	\pagebreak[1]
	%make a page spanning line
	\@linedivide{big}{med}
	%Indented and bolded class title
	\noindent\hspace*{15pt} \textbf{\uppercase{#1}}\\[10pt]}}
	%Make the current class accessible from other commands
	\def\@currentclass{#1: }
}
%command to unset the currentclass command, to make assignments without classes on calendar
\newcommand{\nullclass}{
\def\@currentclass{}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%repeatedly used date setting function
\DeclareDocumentCommand \@adaptivedate { o o o}{ 
	\ifboolexpr{
		%Check if there is only one optional value (day)
		not test {\IfNoValueTF{#1}}
		and 
		test {\IfNoValueTF{#2}}
		and
		test {\IfNoValueTF{#3}}
	}
		%if so, make a command setting the datenumber package date to stable year, stable month, specified day
		{\def\@internaldate{\setdate{\the@stableyear}{\the@stablemonth}{#1}}}
		{
			\ifboolexpr{
				%Check if there are two optional values (month, day)
				not test {\IfNoValueTF{#1}}
				and 
				not test {\IfNoValueTF{#2}}
				and
				test {\IfNoValueTF{#3}}
			}
				%if so, make a command setting the datenumber package date to stable year, specified month, specified day
				{\def\@internaldate{\setdate{\the@stableyear}{#1}{#2}}}
				%if not, then all three optional arguments must have been given, make a command setting the datenumber package date to specified year, specified month, specified day
				{\def\@internaldate{\setdate{#3}{#1}{#2}}}
		}
	%set the date to what it should be
	\@internaldate
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Builder functions
%adds tokens to calendar, expanding first token
\newcommand{\@addtocalendar}[1]{
\expandafter\caltext\expandafter{\expandafter\thedatemonth\expandafter/\expandafter\thedateday\expandafter/\expandafter\thedateyear\expandafter}\expandafter{#1}
}
%add a string of tokens #2 to a token register #1
\newcommand\@appendtotokenreg[2]{
#1\expandafter{\the#1#2}
}
%adds tokens to planner, expanding first token
\newcommand{\@addtoplanner}[1]{
\expandafter\@appendtotokenreg\expandafter{\expandafter\@ibp\expandafter}\expandafter{#1}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%main command of the package, adding an assignment.  Syntax: \assign{description}{month}{day}{year} or \assign{description}{month}{day} or \assign{description}{day} or \assign{description}
\DeclareDocumentCommand \assign { m o o o}{ 
	%within an evaluation, start with the date, as established either by truth or by \setstablemonth
	\@makedatestabledate
	\ifboolexpr{
		%Check if there are none of the optional values (month, day, year)
		test {\IfNoValueTF{#2}}
		and 
		test {\IfNoValueTF{#3}}
		and
		test {\IfNoValueTF{#4}}
	}
		{
			%if so, just put the description and the question mark into the token register, never with highlighting
			\@addtoplanner{\vspace{2pt}\parbox{\linewidth}{{#1}\\
			\hspace*{15pt} ?}\\}
		}
		{	%set the date to the specified date
			\@adaptivedate[#2][#3][#4]
			%for the instances that some optional argument, hence date, has been given, now we'll make the actual formatted entry
			%don't repeat yourself, make the tail into a command
			\def\@preentrytail{\datedayname,~\datemonthname~{\thedateday},~\thedateyear}
				%set the @assignmentdatenum to the absolute datenum of the given datenumber package date for the assignment date, not the real date, remember that was set at the top of the function
				\setmydatenumber{@assignmentdatenum}{\thedateyear}{\thedatemonth}{\thedateday}%
				%find the difference between the two absolute datenums, or the number of days between
				\addtocounter{@assignmentdatenum}{-\the@todaysdatenum}%
				%check if this gap is less than the supplied threshold value or the default, 2
				\ifnumcomp{\the@assignmentdatenum}{<}{\thehlthreshold}
				{
					%if so, highlight the assignment, and add it to token register
					\@addtoplanner{\@adaptivedate[#2][#3][#4]
					\vspace{2pt}\parbox{\linewidth}{
					\@high{#1}\\
					\hspace*{15pt}\@high{\mbox{\@preentrytail}}}\\}
				}
				{
					%if not, don't highlight the assignment or the due date, add it to token register
					\@addtoplanner{\@adaptivedate[#2][#3][#4]
					\vspace{2pt}\parbox{\linewidth}{{#1}\\
					\hspace*{15pt}\@preentrytail}\\}
				}
				%Adding entry to calendar using @addtocalendar
				\@addtocalendar{\@currentclass #1\@linedivide{small}{small}} 
		}
	%just so no other function is messed up, set the datenumber package date back to the stable date
	\@makedatestabledate
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\DeclareDocumentCommand \dassign { m m o o o}{ 
	%within an evaluation, start with the date, as established either by truth or by \setstablemonth
	\@makedatestabledate
	\ifboolexpr{
		%Check if there are none of the optional values (month, day, year)
		test {\IfNoValueTF{#3}}
		and 
		test {\IfNoValueTF{#4}}
		and
		test {\IfNoValueTF{#5}}
	}
		{
		%if so, just put the title and the question mark into the token register, never with highlighting
			\ifboolexpr{
				%Check if there is a description
				not test {\ifblank{#2}}
			}
			{
			%if so, add description
			\@addtoplanner{\vspace{2pt}\parbox{\linewidth}{{#1:}\\
			\hspace*{15pt}\emph{#2}\\
			\hspace*{15pt} ?}\\}
			}
			{
			%if not, don't add a description
			\@addtoplanner{\vspace{2pt}\parbox{\linewidth}{{#1}\\
			\hspace*{15pt} ?}\\}
			}
			}
		{	%set the date to the specified date
			\@adaptivedate[#3][#4][#5]


			%for the instances that some optional argument, hence date, has been given, now we'll make the actual formatted entry
			%don't repeat yourself, make the tail into a command
			\def\@preentrytail{\datedayname,~\datemonthname~{\thedateday},~\thedateyear}
				%set the @assignmentdatenum to the absolute datenum of the given datenumber package date for the assignment date, not the real date, remember that was set at the top of the function
				\setmydatenumber{@assignmentdatenum}{\thedateyear}{\thedatemonth}{\thedateday}%
				%find the difference between the two absolute datenums, or the number of days between
				\addtocounter{@assignmentdatenum}{-\the@todaysdatenum}%
				%check if this gap is less than the supplied threshold value or the default, 2
				\ifnumcomp{\the@assignmentdatenum}{<}{\thehlthreshold}
				{
					%if so, highlight the assignment, and add it to token register
					\ifboolexpr{
						%Check if there is a description
						not test {\ifblank{#2}}
					}
					{
					%if so, add description
					\@addtoplanner{\@adaptivedate[#3][#4][#5]
					\vspace{2pt}\parbox{\linewidth}{
					\@high{#1:}\\
					\emph{\hspace*{15pt}\@high{#2}}\\
					\hspace*{15pt}\@high{\mbox{\@preentrytail}}}\\}
					}
					{
					%if not, don't add description
					\@addtoplanner{\@adaptivedate[#3][#4][#5]
					\vspace{2pt}\parbox{\linewidth}{
					\@high{#1}\\
					\hspace*{15pt}\@high{\mbox{\@preentrytail}}}\\}
					}
				}
				{
					%if not, don't highlight the assignment or the due date, add it to token register
					\ifboolexpr{
						%Check if there is a description
						not test {\ifblank{#2}}
					}
					{
					%if so, add description
					\@addtoplanner{\@adaptivedate[#3][#4][#5]
					\vspace{2pt}\parbox{\linewidth}{{#1:}\\
					\hspace*{15pt}\emph{#2}\\
					\hspace*{15pt}\@preentrytail}\\}
					}
					{
					%if not, don't add description
					\@addtoplanner{\@adaptivedate[#3][#4][#5]
					\vspace{2pt}\parbox{\linewidth}{{#1}\\
					\hspace*{15pt}\@preentrytail}\\}
					}
				}
				%Adding entry to calendar using @addtocalendar
				\@addtocalendar{\@currentclass #1\@linedivide{small}{small}} 
		}
	%just so no other function is messed up, set the datenumber package date back to the stable date
	\@makedatestabledate
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%secondary command of the package, adding an event to calendar, without showing in planner.  Syntax: \event{description}{month}{day}{year} or \event{description}{month}{day} or \event{description}{day}
\DeclareDocumentCommand \event{ m o o o}{ 
	%within an evaluation, start with the date, as established either by truth or by \setstablemonth
	\@makedatestabledate
	\ifboolexpr{
		%Check if there are none of the optional values (month, day, year)
		test {\IfNoValueTF{#2}}
		and 
		test {\IfNoValueTF{#3}}
		and
		test {\IfNoValueTF{#4}}
	}
		{
		%if so, just put the title and the question mark into the token register, never with highlighting
			%if not, don't add a description
			\@addtoplanner{\vspace{2pt}\parbox{\linewidth}{{\textbf{#1}}\\
			\hspace*{15pt} \textbf{?}}\\}
		}
		{
		%set the date to the specified date
			\@adaptivedate[#2][#3][#4]
				%Adding entry to calendar using @addtocalendar
				\@addtocalendar{\expandafter\textbf\expandafter{\@currentclass #1\@linedivide{small}{small}}} 
			%just so no other function is messed up, set the datenumber package date back to the stable date
			\@makedatestabledate
		}
}
%%%%%%%%%%%%%%DISPLAY%%%%%%%%%%%%%%%%%%%%%
%command to actually print the item based planner.  No arguments
\newcommand\printplanner{\raggedright\the\@ibp}
%The Calendar Command Syntax: \printcalendar{startdate mm/dd/yyyy}{no. of weeks}
\newcommand\printcalendar[2]
{
	%Make datenumbersetdate off of setdate
	\expandafter\global\expandafter\let\csname datenumbersetdate\expandafter\endcsname%
	\csname setdate\endcsname
	%Make setdate off of termcalsetdate
	\expandafter\global\expandafter\let\csname setdate\expandafter\endcsname%
	\csname termcalsetdate\endcsname
	%start the calendar with the right date and weeks
	\begin{calendar}{#1}{#2}
		%all the days are important, but not numbered
		\calday[Sunday]{\noclassday}
		\calday[Monday]{\noclassday}
		\calday[Tuesday]{\noclassday}
		\calday[Wednesday]{\noclassday}
		\calday[Thursday]{\noclassday}
		\calday[Friday]{\noclassday}
		\calday[Saturday]{\noclassday}
	\end{calendar}
	%Make calsetdate off of setdate
	\expandafter\global\expandafter\let\csname calsetdate\expandafter\endcsname%
	\csname setdate\endcsname
	%Make setdate off of datenumbersetdate
	\expandafter\global\expandafter\let\csname setdate\expandafter\endcsname%
	\csname datenumbersetdate\endcsname
}