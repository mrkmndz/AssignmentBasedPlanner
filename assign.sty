\ProvidesPackage{assign}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%DEPENDENCIES%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%need in order to resolve conflict between termcal and datenumber
\RequirePackage{savesym}
%need to make calendar
\RequirePackage{termcal}
%turn termcal's \setdate into \origsetdate
\savesymbol{setdate}
%need for date manipulation
\RequirePackage{datenumber}
%need for making function with optional arguments work well
\RequirePackage{xparse}
%need for various programming things
\RequirePackage{etoolbox}
%need for coloring the highlighting
\RequirePackage{color}
%need for highlighting
\RequirePackage{soul}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%OPTIONS%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%if no highlight option, make the highlight command into a dummy command that just passes back the argument
\newcommand{\@high}[1]{#1}
%highlight option
\DeclareOption{highlight}{
%making the \@highcommand into a real highlighting command
\renewcommand{\@high}[1]{\hl{#1}}
}
%process the options
\ProcessOptions\relax
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%VARIABLES%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%making counters we'll need later
\newcounter{@todaysdatenum}\newcounter{@assignmentdatenum}\newcounter{@truemonth}\newcounter{@trueyear}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%FUNCTIONS%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%ARRAYFUNCTIONS%%%%%%%%%%%%%%
%make a new array by making a new counter called ARRAYarraysize Syntax: \@newarray{ARRAY}
\newcommand\@newarray[1]{
	\newcounter{#1arraysize}
	\setcounter{#1arraysize}{0}
}
%set the next value in an array by making a new function called \ARRAY(arraysize+1) Syntax: \@appendtoarray{ARRAY}{VALUE}
\newcommand\@appendtoarray[2]{%
	\stepcounter{#1arraysize}%
	\csedef{#1\csuse{the#1arraysize}}{#2}
}
%retrieve a value from an array by calling a new function called \ARRAYINDEX Syntax: \@retrievefromarray{ARRAY}{INDEX}
\newcommand\@retrievefromarray[2]{%
	\csuse{#1#2}
}
%%%%%%%%%%%%%%ARRAYS%%%%%%%%%%%%%%%%%%%%%%
%making arrays we'll need later
\@newarray{assigninfos}\@newarray{dates}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%to make the date assumptions stable in archive, \setstablemonth command
\newcommand{\setstablemonth}[2]{
%save the month and year commands for later use
\setcounter{@truemonth}{\month}
\setcounter{@trueyear}{\year}
%make the year stable
\month=#1
\year=#2
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%full page line split
\newcommand{\@divisi}{
	\pagebreak[1]
	\vskip\medskipamount 
	\leaders\vrule width \textwidth\vskip0.4pt
	\vskip\medskipamount
	\nointerlineskip
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Bolded class title with divider line
\newcommand{\class}[1]{
\@divisi
\noindent\hspace*{15pt} \textbf{#1}\\
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%main command of the package, adding an assignment.  Syntax: \assign{description}{month}{day}{year} or \assign{description}{month}{day} or \assign{description}{day}
\DeclareDocumentCommand \assign { m o o o}{ 
	%within an evaluation, start with the date, as established either by truth or by \setstablemonth
	\setdatetoday
	%Set the todays datenum to the true datenum
	\setmydatenumber{@todaysdatenum}{\the@trueyear}{\the@truemonth}{\day}%
	\ifboolexpr{
		%Check if there are none of the optional values (month, day, year)
		test {\IfNoValueTF{#2}}
		and 
		test {\IfNoValueTF{#3}}
		and
		test {\IfNoValueTF{#4}}
	}
		{
			%if so, just put the description and the question mark, never with highlighting
			{#1}\\
			\hspace*{15pt} ?\\
		}
		{
			\@appendtoarray{assigninfos}{#1}
			\ifboolexpr{
				%Check if there is only one optional value (day)
				not test {\IfNoValueTF{#2}}
				and 
				test {\IfNoValueTF{#3}}
				and
				test {\IfNoValueTF{#4}}
			}
				%if so, set the datenumber package date to stable year, stable month, specified day
				{\setdate{\thedateyear}{\thedatemonth}{#2}}
				{
					\ifboolexpr{
						%Check if there are two optional values (month, day)
						not test {\IfNoValueTF{#2}}
						and 
						not test {\IfNoValueTF{#3}}
						and
						test {\IfNoValueTF{#4}}
					}
						%if so, set the datenumber package date to stable year, specified month, specified day
						{\setdate{\thedateyear}{#2}{#3}}
						%if not, then all three optional arguments must have been given, so set the datenumber package date to specified year, specified month, specified day
						{\setdate{#4}{#2}{#3}}
				}
			%for the instances that some optional argument, hence date, has been given, now we'll make the actual entry
				%set the @assignmentdatenum to the absolute datenum of the given datenumber package date for the assignment date, not the real date, remember that was set at the top of the function
				\setmydatenumber{@assignmentdatenum}{\thedateyear}{\thedatemonth}{\thedateday}%
				%find the difference between the two absolute datenums, or the number of days between
				\addtocounter{@assignmentdatenum}{-\the@todaysdatenum}%
				%check if this gap is less than two.  this is an option not yet exposed to the caller of the package.  it should be, later
				\ifnumcomp{\the@assignmentdatenum}{<}{2}
				{
					%if so, highlight the assignment
					\@high{#1}\\
					%and highlight and print the due date, in the format Tuesday, January 21, 2014
					\hspace*{15pt}\@high{\hbox{\datedayname,~\datemonthname~{\thedateday},~\thedateyear}}\\
					\@appendtoarray{dates}{\thedatemonth/\thedateday/\thedateyear}
				}
				{
					%if not, don't highlight the assignment or the due date, but print it the same
					{#1}\\
					\hspace*{15pt}\datedayname,~\datemonthname~{\thedateday},~\thedateyear\\
				}
		}
	%just so no other function is messed up, set the datenumber package date back to the stable date
	\setdatetoday
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%The Calendar Command
\newcommand\printassignmentcalendar[2]{
\restoresymbol{lop}{setdate}
\begin{center}
\begin{calendar}{#1}{#2}
%\setlength{\calboxdepth}{.3in}
\calday[Sunday]{\classday}
\calday[Monday]{\classday}
\calday[Tuesday]{\classday}
\calday[Wednesday]{\classday}
\calday[Thursday]{\classday}
\calday[Friday]{\classday}
\calday[Saturday]{\classday}
\newcounter{track}
\setcounter{track}{0}
 \whileboolexpr
    { test {\ifnumcomp{\thetrack}{<}{\thedatesarraysize}} }%
    {	\stepcounter{track}
	\csedef{bah}{\csuse{dates\csuse{thetrack}}}
	\csedef{gah}{\csuse{assigninfos\csuse{thetrack}}}
	\caltext{\bah}{\gah} 
	}
\end{calendar}
\end{center}
}